# -*- coding: utf-8 -*-
"""gradeAnalysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tp2vqsiR7Sqg3oSNyU0D6hQa6xXRbNvW
"""

import numpy as np
import pandas as pd
import scipy as sp
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import math
#from google.colab import files
import string
import random
import operator
import datetime
import time
from pathlib import Path
import os
#pip install reportlab
#pip install Pillow
#pip install xlrd

#CSV to DF, edit below file name to use own data
data_xls = pd.read_excel("Copy of Student_Grades 1164(287).xlsx", index_col=None)

data_xls.to_csv('Copy of Student_Grades 1164(287).csv', encoding='utf-8', index=False)
df = pd.read_csv('Copy of Student_Grades 1164(287).csv')

#Removes any unwanted columns
colNames = list(df.columns.values)
for n in colNames:
  if(n != 'LID 'and n!='STUDENT LAST NAME' and n!= 'STUDENT FIRST NAME' and n!= 'TERM' and n!= 'ACADEMIC ORG' and n!= 'CATALOG' and n!= 'FINAL GRADE'):
    df = df.drop(str(n), axis=1)
colNames = list(df.columns.values)

studFirst = df['STUDENT FIRST NAME']
students = []
studLast = df['STUDENT LAST NAME']
for i in range(len(studFirst)):
    students.append(studFirst[i]+" "+studLast[i])

org = df['ACADEMIC ORG'].unique()
classes = df['CATALOG']   
semesters = df['TERM']
grades = df['FINAL GRADE']

##sorts classes in numerical order
temp = []
for c in classes:
  temp.append(c)
  temp.sort()
  
#creates new DF
newdf = pd.DataFrame()
newdf = pd.DataFrame(students)

#converts grades
for x in range(len(grades)):
    if(grades[i] == 'A'):
        grades[i] = 4
    elif(grades[i] == 'A-'):
        grades[i] = 3.67
    elif(grades[i] == 'B+'):
        grades[i] = 3.34
    elif(grades[i] == 'B'):
        grades[i] = 3
    elif(grades[i] == 'B-'):
        grades[i] = 2.67
    elif(grades[i] == 'C+'):
        grades[i] = 2.34
    elif(grades[i] == 'C'):
        grades[i] = 2
    elif(grades[i] == 'C-'):
        grades[i] = 1.67
    elif(grades[i] == 'D+'):
        grades[i] = 1.33
    elif(grades[i] == 'D'):
        grades[i] = 1
    elif(grades[i] == 'F'):
        grades[i] = 0
    elif(grades[i] == 'WF'):
        grades[i] = 0

newdf = pd.concat([newdf, grades], axis=1)
newdf = pd.concat([newdf, classes], axis=1)
newdf = pd.concat([newdf, semesters], axis=1)
newdf.columns = ('STUDENT', 'FINAL GRADE', 'CLASS NUM', 'TERM')

meanGrades = []
for s in students:
    total = []
    dataS = newdf.loc[newdf['STUDENT'] == s]
   
    for c in classes:
        dataC = dataS.loc[dataS['CLASS NUM']== c]
        total.append(dataC['FINAL GRADE'].values)
        meanGrades.append(np.mean(total))
newdf = pd.concat([newdf, pd.DataFrame(meanGrades)], axis=1)
newdf.columns = ('STUDENT', 'FINAL GRADE', 'CLASS NUM', 'TERM','GPA')
print(newdf)




#for s in semesters:
  #needs work to do semester gap retrieval



#Demonstrates distro of grades in each class, uncomment to display
def normal_plot(data):
  
  x = data
  mu = np.mean(x)
  sigma = np.std(x)
  count, bins, ignored = plt.hist(x, 10)
  plt.plot(bins
           , (sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins - mu)**2 / (2 * sigma**2)), linewidth=2, color='r')
  
#   print(svgNames[counter])
#   plt.savefig("plot0.png")
  
#   print(type(svgNames[counter]))
#   svg = Image.open("plot0.png")
#   svg.save(svgNames)
  
  
  plt.show()
  
  
#BLUE = distribution of students performances
#RED = probability of each grade

def class_average(class1): 
  average = []
  avData = newdf[class1]
  for index, row in avData.iterrows():
    average.append(row[class1].values)    
  return np.mean(average)

def class_average_gap(data): 
  average = []
  
  for index, row in data.iterrows():
    
    average.append(row[1])    
  return np.mean(average)

def month_gap():
  summerGap = []
  semesterGap = []
  noGap = []
  
  
  for index, row in newdf.iterrows():
    x = row['COMP 1 Date'].values
    y = row['COMP 2 Date'].values
    x = x[0]
    y = y[0]
    if(y.month == 3 and x.month == 7):
      noGap.append(row.values)
    elif(y.month == 7 and x.month == 3):
      summerGap.append(row.values)
    elif((y.month == 7 and x.month == 7) or (y.month == 3 and x.month == 3)):
      semesterGap.append(row.values)
    
  return pd.DataFrame(summerGap),pd.DataFrame(noGap),pd.DataFrame(semesterGap),

def class_min(class1): 
  minVal = 4
  avData = newdf[class1]
  for index, row in avData.iterrows():
    if(row[class1].values<minVal):
      minVal = row[class1].values[0]  
  return minVal

def class_max(class1): 
  maxVal = 0
  avData = newdf[class1]
  for index, row in avData.iterrows():
    if(row[class1].values>maxVal):
      maxVal = row[class1].values[0]
  return maxVal

def class_STD(class1):
  STD = []
  avData = newdf[class1]
  for index, row in avData.iterrows():
    STD.append(row[class1].values)
  return np.std(STD)

#line graph of students progress through the classes, uncomment to display
def student_prog(stuIndx):
  plot1 = newdf.loc[stuIndx,classes]
  plot1 = np.array(plot1)
  plt.plot(classes,plot1)

def student_grouper(students):
  aboveAveStudents = []
  aveStudents = []
  belowAveStudents = []
  for index, row in newdf.iterrows():
    if(row['GPA']>=3.5): 
      aboveAveStudents.append(row.values)
    elif(row['GPA']<3.5 and row['GPA']>2.5):
      aveStudents.append(row.values)
    elif(row['GPA']<2.5):
      belowAveStudents.append(row)                   
  return pd.DataFrame(aboveAveStudents),pd.DataFrame(aveStudents),pd.DataFrame(belowAveStudents)

A, B, C = student_grouper(students)
# =============================================================================
# for s in semesterCols:
#   classes.append(s)
# classes.insert(0,'Student')
# classes.insert(1,'GPA')
# =============================================================================
A.columns = [classes]
B.columns = [classes]
C.columns = [classes]
#cleans for later  use of classes
# =============================================================================
# classes = [x for x in classes if x not in semesterCols]
# classes.remove('Student')
# classes.remove('GPA')
# =============================================================================


D,E,F = month_gap()

line = plt.figure()
svgNames = []
counter = 0

for c in classes:
  
#   svgNames.append('plot'+str(counter))
#   svgNames[counter] = svgNames[counter]+'.svg'
  
  normal_plot(newdf[c].values)
  print(c+" GPA is "+str(class_average(c)))
  print(c+" standard deviation is "+str(class_STD(c)))
  print(c+" lowest grade is "+str(class_min(c)))
  print(c+" highest grade is "+str(class_max(c)))
  counter+=1

c = []



for i in range (len(newdf)):
  c.append(classes)
c = pd.DataFrame(c)
c.head()
plt.plot(c[:len(A)],A[classes].values, "o", c='g', alpha = 1)
plt.plot(c[:len(B)],B[classes].values, "o", c='b', alpha = .1)
plt.plot(c[:len(C)],C[classes].values, "o", c='r', alpha = .1)
plt.show()
plt.plot(c[:len(A)],A[classes].values, "o", c='g', alpha = .1)
plt.plot(c[:len(B)],B[classes].values, "o", c='b', alpha = 1)
plt.plot(c[:len(C)],C[classes].values, "o", c='r', alpha = .1)
plt.show()
plt.plot(c[:len(A)],A[classes].values, "o", c='g', alpha = .1)
plt.plot(c[:len(B)],B[classes].values, "o", c='b', alpha = .1)
plt.plot(c[:len(C)],C[classes].values, "o", c='r', alpha = 1)
plt.show()

#c = canvas.Canvas("gradeAnalysisReport.pdf")
c = canvas.Canvas('gradeAnalysisReport.pdf', pagesize=letter)
width, height = letter
c.drawString(100,750,"CS Department Grade Analytics: Currently broken, Plots being silly")





yAxis = 705
xAxis = 20
c.drawString(xAxis,725,("Students with no gap between classes 1 and 2 had an average GPA of "+str(class_average_gap(D))))
c.drawString(xAxis,710,("Students with a semester gap between classes 1 and 2 had an average GPA of "+str(class_average_gap(F))))
c.drawString(xAxis,695,("Students with a summer gap between classes 1 and 2 had an average GPA of "+str(class_average_gap(E))))

for x in classes:
  if(yAxis>0):
    yAxis = yAxis-25
    c.drawString(xAxis,yAxis,(x+" Stats:"))
    yAxis = yAxis-25
    c.drawString(xAxis,yAxis,(x+" GPA is "+str(class_average(x))))
    yAxis = yAxis-25
    c.drawString(xAxis,yAxis,(x+" standard deviation is "+str(class_STD(x))))
    yAxis = yAxis-25
    c.drawString(xAxis,yAxis,(x+" lowest grade is "+str(class_min(x))))
    yAxis = yAxis-25
    c.drawString(xAxis,yAxis,(x+" highest grade is "+str(class_max(x))))
    yAxis = yAxis-25
    c.drawString(xAxis,yAxis,(" "))
  else:
    yAxis = 650
    xAxis +=300
    
  
  

  
  
  
  
  
# svg = Image.open('plot0.svg')
# print(svg.size)
# svg = svg.resize( [int(.5 * s) for s in svg.size] )
# print(svg.size)
# img.save('pdfPlot.jpg')
# c.drawImage('pdfPlot.jpg',25,500)



 









c.save()
files.download('gradeAnalysisReport.pdf')

